// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal;

namespace DiplomProject.Models;

public partial class diplomContext : DbContext
{
    public diplomContext()
    {
    }

    public diplomContext(DbContextOptions<diplomContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Fullname> Fullnames { get; set; }

    public virtual DbSet<Object> Objects { get; set; }

    public virtual DbSet<Rate> Rates { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<WorkSchedule> WorkSchedules { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            // Загружаем конфигурацию из appsettings.json
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json")
                .Build();

            // Получаем строку подключения
            var connectionString = configuration.GetConnectionString("DefaultConnection");

            optionsBuilder.UseMySql(
                connectionString,
                ServerVersion.Parse("8.0.40-mysql"));
        }
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.IdAddress).HasName("PRIMARY");

            entity.ToTable("address");

            entity.Property(e => e.IdAddress).HasColumnName("id_address");
            entity.Property(e => e.Building)
                .HasMaxLength(15)
                .HasColumnName("building");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("city");
            entity.Property(e => e.Corpus)
                .HasMaxLength(15)
                .HasColumnName("corpus");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .HasColumnName("country");
            entity.Property(e => e.Office)
                .HasMaxLength(15)
                .HasColumnName("office");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(10)
                .HasColumnName("postal_code");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .HasColumnName("street");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.IdEmployee).HasName("PRIMARY");

            entity.ToTable("employee");

            entity.HasIndex(e => e.IdFullname, "employee_ibfk_1");

            entity.Property(e => e.IdEmployee).HasColumnName("id_employee");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("comments");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Experience)
                .HasColumnType("text")
                .HasColumnName("experience");
            entity.Property(e => e.HireDate).HasColumnName("hire_date");
            entity.Property(e => e.IdFullname).HasColumnName("id_fullname");
            entity.Property(e => e.Metro)
                .HasMaxLength(100)
                .HasColumnName("metro");
            entity.Property(e => e.Notes)
                .HasColumnType("text")
                .HasColumnName("notes");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.Salary)
                .HasPrecision(10, 2)
                .HasColumnName("salary");
            entity.Property(e => e.Schedules)
                .HasColumnType("text")
                .HasColumnName("schedules");

            entity.HasOne(d => d.IdFullnameNavigation).WithMany(p => p.Employees)
                .HasForeignKey(d => d.IdFullname)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("employee_ibfk_1");
        });

        modelBuilder.Entity<Fullname>(entity =>
        {
            entity.HasKey(e => e.IdFullname).HasName("PRIMARY");

            entity.ToTable("fullname");

            entity.Property(e => e.IdFullname).HasColumnName("id_fullname");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .HasColumnName("middle_name");
        });

        modelBuilder.Entity<Object>(entity =>
        {
            entity.HasKey(e => e.IdObject).HasName("PRIMARY");

            entity.ToTable("object");

            entity.HasIndex(e => e.IdAddress, "object_ibfk_1");

            entity.Property(e => e.IdObject).HasColumnName("id_object");
            entity.Property(e => e.IdAddress).HasColumnName("id_address");
            entity.Property(e => e.ObjectName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("object_name");

            entity.HasOne(d => d.IdAddressNavigation).WithMany(p => p.Objects)
                .HasForeignKey(d => d.IdAddress)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("object_ibfk_1");
        });

        modelBuilder.Entity<Rate>(entity =>
        {
            entity.HasKey(e => e.IdRate).HasName("PRIMARY");

            entity.ToTable("rate");

            entity.HasIndex(e => new { e.IdObject, e.IdService }, "id_object").IsUnique();

            entity.HasIndex(e => e.IdService, "rate_ibfk_2");

            entity.Property(e => e.IdRate).HasColumnName("id_rate");
            entity.Property(e => e.HourlyRate)
                .HasPrecision(10, 2)
                .HasColumnName("hourly_rate");
            entity.Property(e => e.IdObject).HasColumnName("id_object");
            entity.Property(e => e.IdService).HasColumnName("id_service");

            entity.HasOne(d => d.IdObjectNavigation).WithMany(p => p.Rates)
                .HasForeignKey(d => d.IdObject)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rate_ibfk_1");

            entity.HasOne(d => d.IdServiceNavigation).WithMany(p => p.Rates)
                .HasForeignKey(d => d.IdService)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rate_ibfk_2");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.IdService).HasName("PRIMARY");

            entity.ToTable("service");

            entity.Property(e => e.IdService).HasColumnName("id_service");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(100)
                .HasColumnName("service_name");
        });

        modelBuilder.Entity<WorkSchedule>(entity =>
        {
            entity.HasKey(e => e.IdSchedule).HasName("PRIMARY");

            entity.ToTable("work_schedule");

            entity.HasIndex(e => e.IdEmployee, "work_schedule_ibfk_1");

            entity.HasIndex(e => e.IdRate, "work_schedule_ibfk_3");

            entity.HasIndex(e => e.IdService, "work_schedule_ibfk_4");

            entity.Property(e => e.IdSchedule).HasColumnName("id_schedule");
            entity.Property(e => e.DailyHours)
                .HasPrecision(5, 2)
                .HasColumnName("daily_hours");
            entity.Property(e => e.EndTime)
                .HasColumnType("time")
                .HasColumnName("end_time");
            entity.Property(e => e.IdEmployee).HasColumnName("id_employee");
            entity.Property(e => e.IdObject).HasColumnName("id_object");
            entity.Property(e => e.IdRate).HasColumnName("id_rate");
            entity.Property(e => e.IdService).HasColumnName("id_service");
            entity.Property(e => e.Notes)
                .HasColumnType("text")
                .HasColumnName("notes");
            entity.Property(e => e.RecordCreated)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("record_created");
            entity.Property(e => e.StartTime)
                .HasColumnType("time")
                .HasColumnName("start_time");
            entity.Property(e => e.TotalDays).HasColumnName("total_days");
            entity.Property(e => e.TotalHours)
                .HasPrecision(10, 2)
                .HasColumnName("total_hours");
            entity.Property(e => e.WorkDate).HasColumnName("work_date");

            entity.HasOne(d => d.IdEmployeeNavigation).WithMany(p => p.WorkSchedules)
                .HasForeignKey(d => d.IdEmployee)
                .HasConstraintName("work_schedule_ibfk_1");

            entity.HasOne(d => d.IdRateNavigation).WithMany(p => p.WorkSchedules)
                .HasForeignKey(d => d.IdRate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("work_schedule_ibfk_3");

            entity.HasOne(d => d.IdServiceNavigation).WithMany(p => p.WorkSchedules)
                .HasForeignKey(d => d.IdService)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("work_schedule_ibfk_4");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}